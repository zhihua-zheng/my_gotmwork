#!/bin/bash
# Run GOTM using forecast data for OCSPapa
#
#
# Zhihua Zheng, Sep. 29 2018

#######################################################################
#                         Program Basics                              #
#######################################################################

function usage() {
    echo -e "\nRun ocean forecast for Ocean Climate Station Papa\n"
    echo -e "Usage:\n$0 [arguments]\n"
    echo -e "Run the forecast while updating the input data and upload output"
    echo -e "if no arguments are used\n"
    echo -e "Arguments:"
    echo -e "  -old: run forecast using current input data and skip uploading\n"
    echo -e "  -local: get new input data and run the forecast but \
    skip uploading output file\n"
}


# check input arguments using flag l_new, l_upload
if [[ $# == 0 ]]; then
    # run the forecast with new input data [default option]
    l_new=true
    l_upload=true
else
    for param in "$@"; do
        shift
        case $param in
            -local)
                l_new=true
                l_upload=false
                ;;
            -old)
                l_new=false
                l_upload=false
                ;;
            *)
                usage
                exit 1
                ;;
        esac
    done
fi

#######################################################################
#                              Set paths                              #
#######################################################################

# setup paths and tools
source set_tools_gotm
source activate gotmwork-pyenv # activate conda environment
papa_dir="${casedir}/OCSPapa"

cd ${papa_dir}

# directory of base case
basecase="${PROCESS_ROOT}/Papa_forecast/input_data" # OCSPapa forecast forcing

#######################################################################
#                           Update input data                         #
#######################################################################


if [[ "${l_new}" == "true" ]]; then
    echo -e "\nRetrieving most recent input data ... \n"

    ## get new input data

    # OCSPapa subsurface T-S profiles
    echo -e "On the way to NCL script ... \n"
    cd ${PROCESS_ROOT}/Papa_forecast
    ncl get_ocsp_ts.ncl

    # GFS meteorological forcing
    echo -e "\nOn the way to MATLAB script ... \n"
    matlab -nodesktop -nosplash -r "cd Papa_forecast; \
      make_forecast_forcing 'input_data/tprof_file.dat'; exit;"
    # exit MATLAB after finish

    # TO-DO: wave spectrum, WaveWatch III or wave buoy

    cd ${papa_dir} # back to the trail
    echo -e "\nBack at the main program ... \n"
fi

#######################################################################
#                           Set parameters                            #
#######################################################################

# name of the dataset
title="OCSPapa"

# set levels, grid zooming at surface
nlev=128
ddu=2
ddl=0

# run parameters
#dt=900
dt=60
nsave=6

# starting and ending date - in the format of YYYYMMDD
line=$(awk 'FNR==1' ${basecase}/heatflux_file.dat) # first line
date_info=$(echo ${line}| awk '{print $1}') # get the date (first field)
datestart=$(echo ${date_info}| tr -d '-') # trim the dash

line=$(tail -n 1 ${basecase}/heatflux_file.dat) # last line
date_info=$(echo ${line}| awk '{print $1}') # get the date (first field)
dateend=$(echo ${date_info}| tr -d '-') # trim the dash

# clear variables
unset line
unset date_info

# name of the turbulence model

# turbmethod="KPP-GOTM"
# turbmethod="KPP-ROMS"
# turbmethod="KPP-CVMix"
# turbmethod="KPPLT-EFACTOR"
# turbmethod="KPPLT-ENTR"
# turbmethod="KPPLT-RWHGK"
# turbmethod="OSMOSIS"
# turbmethod="JHL"
# turbmethod="EPBL"
# turbmethod="EPBL-LT"
 turbmethod="SMC"
# turbmethod="SMCLT"
# turbmethod="K-EPSILON-SG"

# output file name
outname="gotm_out_${datestart}-${dateend}"

# case name
casename="${title}_${turbmethod}"

#######################################################################
#                        Preprocess input data                        #
#######################################################################

# check and create run directory
rundir="${GOTMRUN_ROOT}/OCSPapa_forecast/${casename}"

if [ ! -d "${rundir}" ]; then
  mkdir -p ${rundir}  # create directory if doesn't exist
fi

cd ${rundir}
/bin/rm *  # remove old files

# copy base case
cp ${basecase}/* ./

# decompress input data
for f in *.gz; do
    gunzip -f ${f}
done

# set run parameters
start_time="${datestart:0:4}-${datestart:4:2}-${datestart:6:2} 00:00:00"
stop_time="${dateend:0:4}-${dateend:4:2}-${dateend:6:2} 00:00:00"
${cmd_nmlchange} -f gotmrun.nml -e start -v "${start_time}"
${cmd_nmlchange} -f gotmrun.nml -e stop -v "${stop_time}"
${cmd_nmlchange} -f gotmrun.nml -e title -v ${title}
${cmd_nmlchange} -f gotmrun.nml -e out_fn -v ${outname}
${cmd_nmlchange} -f gotmrun.nml -e dt -v ${dt}
${cmd_nmlchange} -f gotmrun.nml -e nsave -v ${nsave}
${cmd_nmlchange} -f gotmrun.nml -e nlev -v ${nlev}
${cmd_nmlchange} -f gotmmean.nml -e ddu -v ${ddu}
${cmd_nmlchange} -f gotmmean.nml -e ddl -v ${ddl}

# set turbulence method
source ${scpt_case_turbmethod}

#######################################################################
#                              Run GOTM                               #
#######################################################################
${cmd_gotm} 2> log.${outname}

#######################################################################
#                           Postprocessing                            #
#######################################################################

# plot surface forcing and profiles
source ${scpt_case_postproc}

# upload the output file to Google Drive
# folder ID: 1JlFnl1953A9j_2XBcRnt6xJx6GfVTtRk
if [[ "${l_upload}" == "true" ]]; then
    gdrive upload -p 1JlFnl1953A9j_2XBcRnt6xJx6GfVTtRk ${outname}.nc
fi

# deactivate conda environment
source deactivate gotmwork-pyenv
