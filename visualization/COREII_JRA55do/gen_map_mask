#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Generate mask
#
# Qing Li, 20181128

import sys
import os
import argparse
sys.path.append(os.environ['GOTMWORK_ROOT']+'/tools', )
from gotmanalysis import *

# process the input arguments
parser = argparse.ArgumentParser(description="""
        Generate map mask using a given diagnostics.
        The default diagnostics is 'mld_deltaR_mean'
        The mask is 1 where the given diagnostics is valid
        and 0 where it is np.nan
        """,
        formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('-c', '--casename', action='store', dest='cname',
        metavar='CASENAME', required=True, help='Case name')
parser.add_argument('-t', '--timetag', action='store', dest='ttag',
        metavar='TIMETAG', required=True, help='Time tag (yyyymmdd-yyyymmdd)')
parser.add_argument('-d', '--diagname', action='store', dest='diagname',
        metavar='DIAGNAME', help='Diagnostic name')
# parsing arguments and save to args
args=parser.parse_args()

casename = args.cname
timetag = args.ttag
if args.diagname:
    var = args.diagname
else:
    var = 'mld_deltaR_mean'

# paths
s2data_root = os.environ['GOTMFIG_ROOT']+'/data/'+casename+'/VR1m_DT600s_'+timetag

turbmethod_list = ['KPP-CVMix',
                   'KPP-ROMS',
                   'KPPLT-EFACTOR',
                   'KPPLT-ENTR',
                   'KPPLT-RWHGK',
                   'EPBL',
                   'EPBL-LT',
                   'SMC',
                   'SMCLT',
                   'K-EPSILON-SG',
                   'OSMOSIS']
nm = len(turbmethod_list)

# get mask
for i in np.arange(nm):
    tmname = turbmethod_list[i]
    s2data_name = s2data_root+'/data_'+var+'_'+tmname+'.npz'
    mask_name = s2data_root+'/mask_'+tmname+'.npz'
    # check if required diagnostics data exist
    if not os.path.isfile(s2data_name):
        raise IOError('Input file \'{}\' not found.'.format(s2data_name))
    # read data
    gmobj = GOTMMap().load(s2data_name)
    if i == 0:
        lon = gmobj.lon
        lat = gmobj.lat
        name = 'mask'
        units = '1:valid,0:invalid'
    dmask = np.where(np.isnan(gmobj.data), 0, 1)
    gmobj_mask = GOTMMap(data=dmask, lon=lon, lat=lat, name=name, units=units)
    gmobj_mask.save(mask_name)


