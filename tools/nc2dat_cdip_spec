#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  Qing Li, 20171217

import argparse
import datetime
import numpy as np
from netCDF4 import Dataset
from gotmtool import nctime_to_datetime, nctime_indices, write_spec

def main():
    # process the input arguments
    parser = argparse.ArgumentParser(description="""
            Read wave spectra data from CDIP wave buoy in netCDF format
            and output in a text file in the GOTM input file format.""")
    parser.add_argument('-i', '--input', action='store', dest='fname_in',
            metavar='NCFILENAME', required=True, help='Input netCDF filename')
    parser.add_argument('-o', '--output', action='store', dest='fname_out',
            metavar='DATFILENAME', required=True, help='Output filename')
    parser.add_argument('-ds', '--date_start', action='store', dest='date_start',
            metavar='STARTDATE',
            help='Starting date of input data, in the format of YYYYMMDD')
    parser.add_argument('-de', '--date_end', action='store', dest='date_end',
            metavar='ENDDATE',
            help='Ending date of input data, in the format of YYYYMMDD')
    parser.add_argument('--version', action='version', version='%(prog)s: 1.0')
    # parsing arguments and save to args
    args=parser.parse_args()

    #  TODO: Check if input data exist <17-12-17, Qing Li> #
    fname_in = args.fname_in
    fname_out = args.fname_out
    date_start = args.date_start
    date_end = args.date_end

    # print out some message
    print('Converting {} to {}...'.format(fname_in, fname_out))

    # read data
    infile = Dataset(fname_in, 'r')
    # wave time
    nctime = infile.variables['waveTime']
    dttime = nctime_to_datetime(nctime) # time in datetime format
    # get starting and ending indices
    tidx_start, tidx_end = nctime_indices(nctime, date_start, date_end)
    tdat = [dttime[i].isoformat(' ', 'seconds')
            for i in range(tidx_start, tidx_end+1)] # truncated to seconds

    # band center frequency
    freq = infile.variables['waveFrequency'][:]
    # frequency bandwidth
    dfreq = infile.variables['waveBandwidth'][:]
    # band energy density
    spec = infile.variables['waveEnergyDensity'][:]
    # band mean direction that wave is coming from, in degree clockwise from the true North
    mdir = infile.variables['waveMeanDirection'][:]
    theta = -90.0-mdir # angle in degree counterclockwise from East
    d2r = np.pi/180.0
    xcmp = np.cos(theta*d2r)
    ycmp = np.sin(theta*d2r)
    # wave spectrum
    spec_h2 = spec*dfreq
    # Stokes drift spectrum
    spec_ustokes = xcmp*spec_h2*freq**3
    spec_vstokes = ycmp*spec_h2*freq**3
    # surface Stokes drift
    ustokes0 = np.sum(spec_ustokes,axis=1)
    vstokes0 = np.sum(spec_vstokes,axis=1)

    # write in file
    fdat = freq
    vdat = spec_h2[tidx_start:tidx_end+1,:]
    vdat2 = xcmp[tidx_start:tidx_end+1,:]
    vdat3 = ycmp[tidx_start:tidx_end+1,:]
    write_spec(fname_out, tdat, fdat, [vdat, vdat2, vdat3])

if __name__ == "__main__":
    main()
