#!/usr/bin/env python3
"""
Qing Li, 20171213
"""

import matplotlib.pyplot as plt
import numpy as np
import argparse
import sys
import datetime
from netCDF4 import Dataset, num2date
from gotmtool import *

def main():
    # process input arguments
    parser = argparse.ArgumentParser(description="""
        Plot time series of profile from GOTM.""")
    parser.add_argument('-f', '--file', action='store', dest='fname',
            metavar='FILENAME', help='Input GOTM data')
    parser.add_argument('-f2', '--file2', action='store', dest='fname2',
            metavar='FILENAME', help='Input GOTM data 2')
    parser.add_argument('-v', '--variable', action='store', dest='vname',
            metavar='VARNAME', help='Variable name')
    parser.add_argument('-v2', '--variable2', action='store', dest='vname2',
            metavar='VARNAME', help='Variable name 2')
    parser.add_argument('-o', '--output', action='store', dest='fname_out',
            metavar='FIGNAME', help='Output figure name')
    parser.add_argument('-ptype', '--ptype', action='store', dest='ptype',
            help='Plot type, support contourf (default), scatter and pcolor.')
    parser.add_argument('-ds', '--date_start', action='store', dest='date_start',
            metavar='STARTDATE',
            help='Starting date of input data, in the format of YYYYMMDD')
    parser.add_argument('-de', '--date_end', action='store', dest='date_end',
            metavar='ENDDATE',
            help='Ending date of input data, in the format of YYYYMMDD')
    parser.add_argument('--version', action='version', version='%(prog)s: 1.1')
    # parsing arguments and save to args
    args = parser.parse_args()

    # check input
    if not args.fname or not args.vname:
        print('GOTM netCDF data, variable name, and output figure name are required. Stop.\n')
        parser.print_help()
        sys.exit(1)

    if not args.ptype:
        ptype = 'pcolor'
    elif args.ptype not in ['pcolor', 'scatter', 'contourf']:
        print('Plot type \'{}\' not supported'.format(args.ptype))
        parser.print_help()
        sys.exit(1)
    else:
        ptype = args.ptype

    # read data
    infile = Dataset(args.fname, 'r')

    # read time
    dttime, tidx_start, tidx_end = ncread_dim_time(infile, args.date_start, args.date_end)

    # try to read missing_value if it exists
    try:
        mvalue = infile.missing_value
    except AttributeError:
        infile.set_auto_mask(False)
        mvalue = None

    # read variable
    ncvar = infile.variables[args.vname]

    # read z coordinate
    z = read_z(infile, ncvar)

    # read profile
    mdl = ncread_pfl(ncvar, tidx_start, tidx_end+1)
    if mdl is None:
        print('The variable {} has {} dimension, not supported'.format(ncvar.name, ncvar.ndim))
        sys.exit(1)

    # remove missing values if exist
    if not mvalue is None:
        mdl[np.where(mdl == mvalue)] = np.NaN
    # mask out NaN
    mdl = np.ma.array(mdl, mask=np.isnan(mdl))

    # get levels
    levels = set_levels(mdl)
    c_min = levels[0]
    c_max = levels[-1]

    if not args.fname2:
        # single plot

        # set figure size
        fig_height = 3
        fig_width = 6

        # plot figure
        if ptype == 'pcolor':
            im = plt.pcolor(dttime, z, np.transpose(mdl), vmin=c_min, vmax=c_max)
        elif ptype == 'scatter':
            nz = len(z)
            nt = len(dttime)
            for i in range(nz):
                yy = np.ones([nt,1])
                im = plt.scatter(dttime, yy*z[i], c=mdl[:,i], s=1,
                        vmin=c_min, vmax=c_max)
                plt.xlim([dttime[0], dttime[-1]])
                plt.ylim([min(z),max(z)])
        else:
            # contourf by default
            im = plt.contourf(dttime, z, np.transpose(mdl), levels, extend='both')
        plt.ylabel('Depth (m)')

        # set figure size
        f = plt.gcf()
        f.set_size_inches(fig_width, fig_height)

        # scientific notation for colorbar labels
        cb = plt.colorbar(im)
        cb.formatter.set_powerlimits((-2, 2))
        cb.update_ticks()

    else:
        # double plots

        # read data
        infile2 = Dataset(args.fname2, 'r')

        # read time
        dttime2, tidx_start2, tidx_end2 = ncread_dim_time(infile2, args.date_start, args.date_end)

        # try to read missing_value if it exists
        try:
            mvalue2 = infile2.missing_value
        except AttributeError:
            infile2.set_auto_mask(False)
            mvalue2 = None

        # read variable
        if args.vname2:
            ncvar2 = infile2.variables[args.vname2]
        else:
            ncvar2 = infile2.variables[args.vname]

        # read z coordinate
        z2 = read_z(infile2, ncvar2)

        # read profile
        mdl2 = ncread_pfl(ncvar2, tidx_start2, tidx_end2+1)
        if mdl2 is None:
            print('The variable {} has {} dimension, not supported'.format(ncvar2.name, ncvar2.ndim))
            sys.exit(1)

        # remove missing values if exist
        if not mvalue2 is None:
            mdl2[np.where(mdl2 == mvalue2)] = np.NaN
        # mask out NaN
        mdl2 = np.ma.array(mdl2, mask=np.isnan(mdl2))

        # set figure size
        fig_height = 6
        fig_width = 6

        # plot figure
        f, axarr = plt.subplots(2, sharex=True)
        f.set_size_inches(fig_width, fig_height)

        if ptype == 'pcolor':
            im = axarr[0].pcolor(dttime, z, np.transpose(mdl), vmin=c_min, vmax=c_max)
            im2 = axarr[1].pcolor(dttime2, z2, np.transpose(mdl2), vmin=c_min, vmax=c_max)
        elif ptype == 'scatter':
            nz = len(z)
            nt = len(dttime)
            for i in range(nz):
                yy = np.ones([nt,1])
                im = axarr[0].scatter(dttime, yy*z[i], c=mdl[:,i], s=1,
                        vmin=c_min, vmax=c_max)
                axarr[0].set_xlim([dttime[0], dttime[-1]])
                axarr[0].set_ylim([min(z),max(z)])
            nz2 = len(z2)
            nt2 = len(dttime2)
            for i in range(nz2):
                yy = np.ones([nt2,1])
                im2 = axarr[1].scatter(dttime2, yy*z2[i], c=mdl2[:,i], s=1,
                        vmin=c_min, vmax=c_max)
                axarr[1].set_xlim([dttime[0], dttime[-1]])
                axarr[1].set_ylim([min(z2),max(z2)])
        else:
            # contourf by default
            im = axarr[0].contourf(dttime, z, np.transpose(mdl), levels, extend='both')
            im2 = axarr[1].contourf(dttime2, z2, np.transpose(mdl2), levels, extend='both')

        axarr[0].set_ylabel('Depth (m)')
        axarr[1].set_ylabel('Depth (m)')

        # scientific notation for colorbar labels
        cb = plt.colorbar(im, ax=axarr[0])
        cb.formatter.set_powerlimits((-2, 2))
        cb.update_ticks()
        cb2 = plt.colorbar(im2, ax=axarr[1])
        cb2.formatter.set_powerlimits((-2, 2))
        cb2.update_ticks()

    # auto adjust the x-axis label
    plt.gcf().autofmt_xdate()

    # reduce margin
    plt.tight_layout()

    # save figure
    if args.fname_out:
        figname = args.fname_out
    else:
        figname = args.vname

    plt.savefig(figname, dpi = 300)

def read_z(infile, ncvar):
    """Read the z coordinate of a variable in a netCDF file

    :infile: (netCDF4 Dataset) input netCDF file
    :ncvar: (netCDF variable) variable
    :returns: z coordinate (negative below the surface)

    """
    # choose veritcal coordinate
    varlist = infile.variables.keys()
    if 'z' in varlist:
        # GOTM output (fixed z)
        try:
            coord = ncvar.coordinates
        except AttributeError:
            coord = 'v4'
        if 'zi' in coord:
            z = infile.variables['zi'][0,:,0,0]
        elif 'z' in coord:
            z = infile.variables['z'][0,:,0,0]
        else:
            z = infile.variables['z'][:]
    elif 'depth' in varlist:
        # observation
        z = -abs(infile.variables['depth'][:])
    elif 'DEPTH' in varlist:
        # observation
        z = -abs(infile.variables['DEPTH'][:])
    else:
        print('Depth dimension is required and should have the name \"z\" or \"depth\" or \"DEPTH\"')
    return z

def set_levels(data):
    """Set contour levels by the 99th and 1st percentiles of the data.

    :data: (list, numpy array) array of data

    """
    # round off
    c_max = float(format(np.nanpercentile(data, 99), '.1e'))
    c_min = float(format(np.nanpercentile(data, 1), '.1e'))
    dsub = 0
    # if c_max equals c_min, check more digits
    if c_max == c_min:
        data_new = data
        while c_max == c_min:
            dsub +=c_max
            data_new = data_new-c_max
            c_max = float(format(np.nanpercentile(data_new, 99), '.1e'))
            c_min = float(format(np.nanpercentile(data_new, 1), '.1e'))
    # set 20 levels
    c_int = (c_max-c_min)/20
    levels = np.arange(c_min, c_max+c_int, c_int)+dsub
    return levels

if __name__ == "__main__":
    main()
