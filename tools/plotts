#!/usr/bin/env python3
"""
Qing Li, 20171213
"""

import matplotlib.pyplot as plt
import numpy as np
import argparse
import sys
import datetime
from netCDF4 import Dataset, num2date
from gotmtool import *

def main():

    # process input arguments
    parser = argparse.ArgumentParser(description="""
        Plot time series from GOTM output. Accept multiple variables.""")
    parser.add_argument('-f', '--file', action='store', dest='fname',
            metavar='FILENAME', help='Input GOTM data')
    parser.add_argument('-f2', '--file2', action='store', dest='fname2',
            metavar='FILENAME', help='Input GOTM data 2')
    parser.add_argument('-v', '--variable', action='store', dest='vname',
            metavar='VARNAME', nargs='+', help='Variable name')
    parser.add_argument('-o', '--output', action='store', dest='fname_out',
            metavar='FIGNAME', help='Output figure name')
    parser.add_argument('-ds', '--date_start', action='store', dest='date_start',
            metavar='STARTDATE',
            help='Starting date of input data, in the format of YYYYMMDD')
    parser.add_argument('-de', '--date_end', action='store', dest='date_end',
            metavar='ENDDATE',
            help='Ending date of input data, in the format of YYYYMMDD')
    parser.add_argument('--version', action='version', version='%(prog)s: 1.1')
    # parsing arguments and save to args
    args = parser.parse_args()

    # check input
    if not args.fname or not args.vname or not args.fname_out:
        print('GOTM netCDF data, variable name, and output figure name are required. Stop.\n')
        parser.print_help()
        sys.exit(1)

    if args.fname2:
        l_f2 = True
    else:
        l_f2 = False

    # read data
    infile = Dataset(args.fname, 'r')
    dttime, tidx_start, tidx_end = ncread_dim_time(infile, args.date_start, args.date_end)

    # do the same for input file 2
    if l_f2:
        infile2 = Dataset(args.fname2, 'r')
        dttime2, tidx_start2, tidx_end2 = ncread_dim_time(infile2, args.date_start, args.date_end)

    # number of subfigure
    nv = len(args.vname)
    # set figure size
    fig_width = 6
    fig_height = 4+0.8*(nv-1)
    if nv == 1:
        # single figure
        # read data
        varname = args.vname[0]
        ncvar = infile.variables[varname]
        dat = ncread_ts(ncvar, tidx_start, tidx_end+1)
        # skip the first data point
        plt.plot(dttime[1:], dat[1:], '-k', linewidth=1.5)
        if l_f2:
            # add the second line
            ncvar2 = infile2.variables[varname]
            dat2 = ncread_ts(ncvar2, tidx_start2, tidx_end2+1)
            plt.plot(dttime2[1:], dat2[1:], '-r', linewidth=1.5)
        f = plt.gcf()
        f.set_size_inches(fig_width, fig_height)
        plt.ylabel(varname)
        # use scientific notation in y-axis label
        ax = plt.gca()
        ax.ticklabel_format(axis='y', style='sci', scilimits=(-2,2))
        # make the exponent labels cleaner
        ax.yaxis.offsetText.set_fontsize(8)
        ax.yaxis.offsetText.set_x(-0.02)
    else:
        # subplot, share x axis
        f, axarr = plt.subplots(nv, sharex=True)
        f.set_size_inches(fig_width, fig_height)
        for i in range(nv):
            ax = axarr[i]
            # read data
            varname = args.vname[i]
            ncvar = infile.variables[varname]
            dat = ncread_ts(ncvar, tidx_start, tidx_end+1)
            # skip the first data point
            ax.plot(dttime[1:], dat[1:], '-k', linewidth=1.5)
            if l_f2:
                # add the second line
                ncvar2 = infile2.variables[varname]
                dat2 = ncread_ts(ncvar2, tidx_start2, tidx_end2+1)
                ax.plot(dttime2[1:], dat2[1:], '-r', linewidth=1.5)
            ax.set_ylabel(varname)
            # use scientific notation in y-axis label
            ax.ticklabel_format(axis='y', style='sci', scilimits=(-2,2))
            # make the exponent labels cleaner
            ax.yaxis.offsetText.set_fontsize(8)
            ax.yaxis.offsetText.set_x(-0.02)
    # x label date
    plt.gcf().autofmt_xdate()

    # reduce margin
    plt.tight_layout()

    # save figure
    figname = args.fname_out
    plt.savefig(figname, dpi=300)

if __name__ == "__main__":
    main()
